{\rtf0\ansi{\fonttbl\f0\fnil Times-Roman;\f1\fmodern Ohlfs;}
\paperw17680
\paperh12940
\margl120
\margr0
{\colortbl;\red0\green0\blue0;}
\pard\tx1140\tx2300\tx3440\tx4600\tx5760\tx6900\tx8060\tx9200\tx10360\tx11520\f0\b\i0\ulnone\fs36\fc1\cf1 	ViterbiModel\
	\
		
\b0\fs28 INHERITS FROM			HMMModel
\b\fs36 \
\
	 
\b0\fs28  	DECLARED IN			ViterbiModel.h\
\
		CLASS DESCRIPTION\
		\
		This object's superclass, HMMModel, is capable of doing HMM recognition.  ViterbiModel adds the capability\
		of training the models.\
\
		INSTANCE VARIABLES\
\

\pard\tx1140\tx2300\tx2880\tx4600\tx5760\tx6900\tx9200\tx9200\tx10360\tx11520\fc1\cf1 			
\i Inherited from HMMModel	
\i0 int	modelLength;\
						int	*modelStates;\
						int	*backTrace;\
						int	bestModelEnd\
						int	codebooks;\
						int	*psi[MAX_FRAMES];\
						int	*codebookDimensions;\
						int	oldState;\
						int	maxFrames;\
						float	*codebookWeights;\
						float	*logPiInitial;\
						float	*logPiFinal;\
						float	**logA;\
						float	***logB;\
						float	*stateProbability;\
						float	*maxProbability;\
						double	maxScore;\
						BOOL	useCodebookIndices;\
						char	modelDescription[MAX_NAME];\
						NXZone	*myZone;\

\pard\tx1140\tx2300\tx2880\tx4600\tx5760\tx6900\tx8060\tx9200\tx10360\tx11520\fs16\fc0\cf0 \

\pard\tx1140\tx2300\tx2880\tx4600\tx5760\tx6900\tx9200\tx9200\tx10360\tx11520\i\fs28\fc0\cf0 			Declared in ViterbiModel
\i0 	
\fc1\cf1 int	**transitionsCount;\
						int	***observationsCount;\
						int	*initialStateCount;\
						int	*finalStateCount;\
						BOOL	newTrainingFile;\
				
\pard\tx1140\tx2300\tx3440\tx4600\tx5760\tx6900\tx8060\tx9200\tx10360\tx11520\fc0\cf0 \

\pard\tx1140\tx2300\tx2880\tx4600\tx5760\tx6900\tx8060\tx9200\tx10360\tx11520\fc0\cf0 			transitionsCount		counter used during training for state transitions\
			observationsCount		counter used during training for observation probs\
			initialStateCount		counter used during training for initial state probs\
			finalStateCount		counter used during training for final state probs\
			newTrainingFile		if YES, the next input will be the first state\

\fc1\cf1 \
	\
		METHOD TYPES\
		\
		Initializing a new instance		- initWithLength:name:states:codebooks:weights: zone:\
						- freeArrays\
						- allocateArrays\
\
		Initialization prior to training		- initTrainingCounts\
						- initCodebookDimensions:withWeights:\
						- initTrainingFile\
\
		Running the algorithm		- initialTrainingStep:indices:\
						- initialTrainingStep:finalFrame:\
\
		Updating the models		- updateInitialModel\
						- normalizeProbabilities\
						- addSkipState\
\
	INSTANCE METHODS
\pard\tx1140\tx1800\tx2880\tx4600\tx5760\tx6900\tx8060\tx9200\tx10360\tx11520\fc1\cf1 \
\
	
\b addSkipState\
		- addSkipStateFor
\b0 \
\
		Call this method after stepping through the initial training and prior to updating the initial model.  It adds counts to the state\
		transition counter to effect a skip state.\
\
\
	
\b allocateArrays
\b0 \
		- 
\b allocateArrays
\b0 \
\
		This is an internal method which is called from the initialization routine.  Do not use.\

\pard\tx1140\tx1800\tx2880\tx4600\tx5760\tx6900\tx8060\tx9200\tx10360\tx11520\fc1\cf1 \
\
	
\b freeArrays
\b0 \
		- 
\b freeArrays
\b0 \
	\
		Frees the allocated arrays.  This is a local method, and should not be called directly.\

\pard\tx1140\tx1800\tx2880\tx4600\tx5760\tx6900\tx8060\tx9200\tx10360\tx11520\fc1\cf1 \
	\
	
\b initialTrainingStep:indices:
\b0 \
		- 
\b initialTrainingStep:
\b0 (int)
\i state
\i0  
\b indices:
\b0 (short *)
\i indices
\i0 \
\
		This method steps the model by giving it the current state, and the set of codebook indices.  The model then updates its\
		probability counters accordingly.  Note that this method can be used during initial training when the states are evenly divided across\
		the speech data, as well as during Viterbi training when the states are gotten from the Viterbi backtrace.\
\
\
	
\b initialTrainingStep:finalFrame:
\b0 \
		-
\b initialTrainingStep:
\b0 (int)
\i state
\i0  
\b finalFrame:
\b0 (BOOL)
\i flag
\i0 \
	\
		This method steps the given model by giving it the current state.  It differs from the method above in that the one above has\
		codebook indices as input to the HMM.  The model then updates its probability counters accordingly.  Set 
\i flag
\i0  if this is the\
		final frame in the file.  Note that this method can be used during initial training when the states are evenly divided across the\
		speech data, as well as during Viterbi training when the states are gotten from the Viterbi backtrace.\
\
\
	
\b initCodebookDimensions:withWeights:
\b0 \
		-
\b  initCodebookDimensions:
\b0 (int *)
\i dimensions
\i0  
\b withWeights:
\b0 (float *)
\i weights
\i0 \
\
		This method should be called immediately after 
\b initWithLength:name:states:codbooks:zone:
\b0  if this object is being used in the\
		mode where its inputs are codebook indices.  This method allocates the appropriate arrays for the codebooks.\
\
\
	
\b initTrainingCounts
\b0 \
		-
\b initTrainingCounts
\b0 \
\
		Initializes the probability counters in this model.\

\i 	
\i0 \
\
	
\b initTrainingFile
\b0 \
		- 
\b initTrainingFile
\b0 \
	\
		This method tells the receiving model that we got a new training file, so get ready to start at state 0.\
\
\
	
\b initWithLength:name:states:codebooks:zones:
\b0 \
		- 
\b initWithLength:
\b0 (int)
\i length
\b\i0  name:
\b0 (char *)
\b name states:
\b0 (int *)
\i states
\b\i0  codebooks:
\b0 (int)
\i numberCodebooks
\b\i0  \
		                   weights:
\b0 (float *)
\i weights
\b\i0  zone:
\b0 (NXZone *)
\i zone
\i0 \
	\
		This method initializes the object with the given 
\i length
\i0  (number of states), given 
\i name
\i0 , given 
\i states
\i0 , given 
\i numberCodebooks
\i0 , given\
		codebook weights, and the zone for efficiently allocating arrays.\
\
\
	
\b normalizeProbabilities
\b0 \
		- 
\b normalizeProbabilities
\b0 \
	\
		This is an local method which is used to normalize the transition and state probabilities after training.  It probably should not be\
		called outside of this object.\
\
\
	
\b updateInitialModel\
		- updateInitialModel
\b0 \
\
		Updates the probabilities of all the models. Should be called after stepping through all the training files using,\
		
\b initialTrainingStep:indices:, 
\b0 or using, 
\b initialTrainingStep:finalFrame:
\b0 .  Also, normalizes the probabilities as well as taking\
		their logs.\

}
